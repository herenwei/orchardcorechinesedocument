@using OrchardCore.ContentManagement.Metadata.Settings;
@using OrchardCore.Widgets.ViewModels;

@model WidgetsListPartEditViewModel

@inject IContentManager ContentManager
@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager
@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager

@{
    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.Settings.ToObject<ContentTypeSettings>().Stereotype == "Widget");
}

<script asp-name="jquery-ui" at="Foot"></script>

<fieldset class="form-group">
    @foreach (var zone in Model.AvailableZones)
    {
        var widgetTemplatePlaceholderId = Guid.NewGuid().ToString("n");

        <div class="widget-list-zone card">
            <div class="card-header text-muted">
                @zone
            </div>
            <div class="widget-editor-body card-body" data-zone="@zone">
                <div id="@widgetTemplatePlaceholderId" class="widget-template-placeholder">
                    @{ var htmlFieldPrefix = this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix; }

                    @if (Model.WidgetsListPart.Widgets.ContainsKey(zone))
                    {
                        foreach (var widget in Model.WidgetsListPart.Widgets[zone])
                        {
                            var prefix = Guid.NewGuid().ToString("n");
                            <div class="widget-template">
                                @{
                                    dynamic widgetEditor = await ContentItemDisplayManager.BuildEditorAsync(widget, Model.Updater, false, "", prefix);

                                    widgetEditor.ZonesName = Html.NameFor(x => x.Zones);
                                    widgetEditor.PrefixesName = Html.NameFor(x => x.Prefixes);
                                    widgetEditor.ContentTypesName = Html.NameFor(x => x.ContentTypes);
                                    widgetEditor.TargetId = widgetTemplatePlaceholderId;

                                    widgetEditor.Metadata.Alternates.Add("Widget_Edit__List");
                                }

                                @await DisplayAsync(widgetEditor)

                                @{ this.ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = htmlFieldPrefix; }
                                <input type="hidden" asp-for="Zones" value="@zone" class="source-zone" />
                                <input type="hidden" asp-for="Prefixes" value="@prefix" />
                                <input type="hidden" asp-for="ContentTypes" value="@widget.ContentType" />
                            </div>
                        }
                    }
                </div>

                <div class="btn-group ">
                    <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @T["Add Widget"]
                    </button>
                    <div class="dropdown-menu">
                        @foreach (var type in widgetContentTypes)
                        {
                            <a class="dropdown-item add-list-widget  btn-sm"
                               data-target-id="@widgetTemplatePlaceholderId"
                               data-zones-name="@Html.NameFor(x => x.Zones)"
                               data-prefixes-name="@Html.NameFor(x => x.Prefixes)"
                               data-contenttypes-name="@Html.NameFor(x => x.ContentTypes)"
                               data-widget-type="@type.Name"
                               data-zone="@zone"
                               href="javascript:;">@type.DisplayName</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Context.Items["WidgetsListPart.Edit"] == null)
    {
        Context.Items["WidgetsListPart.Edit"] = new object();
        <input type="hidden" id="buildEditorUrl" value="@Url.Action("BuildEditor", "Admin", new { area = "OrchardCore.Widgets" })" />

        @foreach (var type in widgetContentTypes)
        {
            // Render a mock widget so that its resources are included in the page
            var contentItem = await ContentManager.NewAsync(type.Name);
            await DisplayAsync(await ContentItemDisplayManager.BuildEditorAsync(contentItem, Model.Updater, true, "", Guid.NewGuid().ToString("n")));
        }

        <script asp-src="/OrchardCore.Widgets/Scripts/widgetslist.edit.js" at="Foot" depends-on="admin"></script>
        <style asp-src="/OrchardCore.Widgets/Styles/widgetslist.edit.css"></style>
    }

    <script at="Foot">
        $(".widget-template-placeholder").sortable({
            handle: ".widget-editor-header",
            cursor: "move",
            connectWith: '.widget-template-placeholder',
            receive: function (event, ui) {
                var newZone = ui.item.closest('.widget-editor-body').data("zone");
                var zoneInput = ui.item.find('.source-zone').val(newZone);
            },
            stop: function (event, ui) {
                $(document).trigger('contentpreview:render');
            }
        });
    </script>
</fieldset>
